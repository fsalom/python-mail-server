name: Deploy to DigitalOcean

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Build Docker image
      run: docker build -t myapp:latest .

    - name: Install SSH client
      run: sudo apt-get install -y openssh-client

    - name: Add SSH key and set permissions
      run: |
        echo "${{ secrets.DROPLET_SSH_KEY }}" | tr -d '\r' > key.pem
        chmod 600 key.pem

    - name: List available package managers in /usr/bin for debugging
      run: ssh -o StrictHostKeyChecking=no -i key.pem root@"${{ secrets.DROPLET_IP }}" "ls /usr/bin"

    - name: List available package managers in /bin for debugging
      run: ssh -o StrictHostKeyChecking=no -i key.pem root@"${{ secrets.DROPLET_IP }}" "ls /bin"

    - name: Check if apt-get is in a different location
      run: ssh -o StrictHostKeyChecking=no -i key.pem root@"${{ secrets.DROPLET_IP }}" "find / -name apt-get"

    - name: Ensure coreutils is installed on the server (for ln and chmod)
      run: ssh -o StrictHostKeyChecking=no -i key.pem root@"${{ secrets.DROPLET_IP }}" "
        if command -v apt-get > /dev/null; then
          apt-get update && apt-get install -y coreutils;
        elif command -v yum > /dev/null; then
          yum install -y coreutils;
        elif command -v apk > /dev/null; then
          apk add --no-cache coreutils;
        else
          echo 'No compatible package manager found.';
          exit 1;
        fi"
        
    - name: Ensure docker-compose is installed on the server
      run: ssh -o StrictHostKeyChecking=no -i key.pem root@"${{ secrets.DROPLET_IP }}" "
        if command -v apt-get > /dev/null; then
          apt-get update && apt-get install -y docker-compose;
        elif command -v yum > /dev/null; then
          yum install -y docker-compose;
        elif command -v apk > /dev/null; then
          apk add --no-cache docker-compose;
        else
          echo 'No compatible package manager found.';
          exit 1;
        fi"

    - name: Ensure bunzip2 is installed on the server
      run: ssh -o StrictHostKeyChecking=no -i key.pem root@"${{ secrets.DROPLET_IP }}" "
        if command -v apt-get > /dev/null; then
          apt-get update && apt-get install -y bzip2;
        elif command -v yum > /dev/null; then
          yum install -y bzip2;
        elif command -v apk > /dev/null; then
          apk add --no-cache bzip2;
        else
          echo 'No compatible package manager found.';
          exit 1;
        fi"

    - name: Create project directory on server if not exists
      run: ssh -o StrictHostKeyChecking=no -i key.pem root@"${{ secrets.DROPLET_IP }}" "mkdir -p /root/mailserver"

    - name: Copy Docker Compose file to server
      run: scp -o StrictHostKeyChecking=no -i key.pem docker-compose.yml root@"${{ secrets.DROPLET_IP }}:/root/mailserver"

    - name: Copy Dockerfile file to server
      run: scp -o StrictHostKeyChecking=no -i key.pem Dockerfile root@"${{ secrets.DROPLET_IP }}:/root/mailserver"

    - name: Save Docker image and load on server
      run: |
        docker save myapp:latest | bzip2 | ssh -o StrictHostKeyChecking=no -i key.pem root@"${{ secrets.DROPLET_IP }}" 'bunzip2 | docker load'

    - name: List files in mailserver directory for debugging
      run: ssh -o StrictHostKeyChecking=no -i key.pem root@"${{ secrets.DROPLET_IP }}" "ls -la /root/mailserver"
      
    - name: Shut down application
      run: ssh -o StrictHostKeyChecking=no -i key.pem root@"${{ secrets.DROPLET_IP }}" "docker-compose -f /root/mailserver/docker-compose.yml down"

    - name: Deploy application
      run: ssh -o StrictHostKeyChecking=no -i key.pem root@"${{ secrets.DROPLET_IP }}" "docker-compose -f /root/mailserver/docker-compose.yml up"

    - name: Clean up SSH key
      run: rm -f key.pem
